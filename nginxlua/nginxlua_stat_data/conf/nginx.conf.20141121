
user  www www;
worker_processes  1;

error_log  /opt/nginx/logs/error.log  info;
pid        /opt/nginx/logs/nginx.pid;


events {
    use epoll;
    worker_connections  65535;
}


##############################################
http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /opt/nginx/logs/access.log  main;

    keepalive_timeout  65;

    lua_package_path "/opt/nginx/otherlibs/lib/?.lua;;";
    lua_package_cpath "/opt/nginx/otherlibs/lib/?.so;;";

    lua_shared_dict log_dict 50M;

    geoip_country /opt/nginx/otherlibs/GeoIP.dat;
    geoip_city    /opt/nginx/otherlibs/GeoLiteCity.dat;

    geoip_proxy 10.2.10.0/24; 
    geoip_proxy_recursive on;     

    #############################
    server {
        listen       80;
        server_name  10.2.10.251;
    
        index check.html;
        root  /var/www/html;

        charset utf-8;

        ########        
        location /video {

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;

            content_by_lua_file  /opt/nginx/otherlibs/PostDataHandle.lua;

        }

        ########
        location /advideo {

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;

            content_by_lua_file  /opt/nginx/otherlibs/RealDataHandle68china.lua;

        }

        ########
        location /tracking {

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;

            content_by_lua_file /opt/nginx/otherlibs/TrackDataHandle.lua;
        }

        ########
        location /zzdemo {

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;

            content_by_lua_file /opt/nginx/otherlibs/zzdemo.lua;
        }

        location /sandboxzzdemo {

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;

            content_by_lua_file /opt/nginx/otherlibs/sandboxzzdemo.lua;
        }
        #######
        location /event {

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;

            content_by_lua_file /opt/nginx/otherlibs/TrackDataHandle.lua;

        }

        #######
        location /collect {

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;

            content_by_lua_file /opt/nginx/otherlibs/collect.lua;

        }

        ########
        location /sandbox {

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods GET;

            content_by_lua_file  /opt/nginx/otherlibs/uPostDataHandle.lua;

        }

 
        ########
        location /log {
    
            content_by_lua '
                  
                  local log_dict = ngx.shared.log_dict

                  keylist = log_dict:get_keys(0)

                  for key,value in ipairs(keylist) 
                      do
                        ngx.say(key ,"--",value,"--",log_dict:get(value))
                        
                      end 
            ';

        }

        ########
        location /debug {
                 
            #For Debug
            content_by_lua '
                 local cjson = require "cjson"
                 local redis =  require "resty.redis"
                 local remoteip = ngx.var.http_x_forwarded_for
                 local country = ngx.var.geoip_city_country_name
                 local city = ngx.var.geoip_city
                 local region = ngx.var.geoip_region
                 ngx.say("geo info is :" , country.."_"..city.."_"..region.."_"..remoteip)
                 
                 local redata = redis:new()
                 redata:set_timeout(1000)
                 local ok,err = redata:connect("10.2.10.19",6379)
                 if not ok then
                    ngx.say("error1")
                    return
                 end
                 local res,err = redata:get("l12378_flow")
                 if res == ngx.null  then
                    ngx.say(err)
                 else
                    ngx.say(res)                  
                 end
                 
                 
            ';

        }

    }

}
