
user              nginx;
worker_processes  2;

error_log  /var/log/nginx/error.log error;

pid        /var/run/nginx.pid;

events {
    use epoll;
    worker_connections  65535;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  10;

    gzip  on;

    lua_package_path "/opt/nginx/otherlibs/lib/?.lua;;";
    lua_package_cpath "/opt/nginx/otherlibs/lib/?.so;;";

    lua_shared_dict cache_dict 10M;
    
    #include /etc/nginx/conf.d/*.conf;


    #--------------------
    #FOR VIDEO LIVE AND VOD PLATFORM FOR TEST ENVIRMENT
    #--------------------

    server {
          listen 81;
          server_name zb.68china.cn;

          location /crossdomain.xml {
                   alias  /var/www/crossdomain.xml;
          }
          
          location / {

set $target '';

access_by_lua '

local redis = require "resty.redis"
local cjson = require "cjson"

-- Create a link to redis
local red = redis:new()
red:set_timeout(1000)
local ok,err = red:connect("10.2.10.19",6379)
if not ok then
   ngx.log(ngx.ERR,"Fail connect to local redis:",err)
   return ngx.exit(500)
end
 
-- Calculate the number of elements for table
function htgetn(hashtable)
   local n = 0
   for _,v in pairs(hashtable) do
      n = n + 1
   end
   return n
end
                
-- Split string by delimiter 
function split(str,delimiter)
  local sub_str_table = {}
  while true do
     local s , e = string.find(str,"%"..delimiter)
     if s and e then
        sub_str = string.sub(str,1,e-1)
        table.insert(sub_str_table,sub_str)
        str = string.sub(str,e+1,-1)
     else
        if htgetn(sub_str_table) > 0 then
           table.insert(sub_str_table,str)
           return sub_str_table
        else
           return nil
        end

        break

     end
  end
end           

-- Main                 
uristr=ngx.var.uri
urisegtab = split(string.sub(uristr,2,-1),"/")
uid=urisegtab[1]
cid=urisegtab[2]

--ngx.say(cid)

-- Obtain the corresponding collection server address 
local ipaddr,err = red:hget("cid_to_ipaddr",cid)

--ngx.say(ipaddr)

if not ipaddr then
   ngx.log(ngx.ERR,"failed to get redis key:",err)
   return ngx.exit(500)
end

if ipaddr == ngx.null then
   ngx.log(ngx.ERR,"not ipaddr found for cid ",cid)
   return ngx.exit(400)
end

ngx.var.target = ipaddr

--ngx.say(ipaddr)
	 
';

proxy_pass http://$target;
         
          } 
    }


##################################
#LIVE AND VOD PLATFORM FOR PRODUCT ENVIRONMENT
##################################

server {
          listen 80;
          server_name live.68baobao.cn;
          location /crossdomain.xml {
                   alias  /var/www/crossdomain.xml;
          }

          #CHECK NGINX LOCAL CACHE
          location /checkcache {
content_by_lua '

local cache_dict = ngx.shared.cache_dict
keylist = cache_dict:get_keys(0)
for key,value in ipairs(keylist)
   do
     ngx.say(key ,"--",value,"--",cache_dict:get(value))
   end

';
          }
   
          #MAIN HANDLE PROGRAM
          location ~* .(ts|m3u8)$ {

set $target '';

access_by_lua '

local redis = require "resty.redis"
local cjson = require "cjson"
local cache_dict = ngx.shared.cache_dict

-- Create a link to redis
local red = redis:new()
red:set_timeout(1000)
local ok,err = red:connect("10.2.10.19",6379)
if not ok then
   ngx.log(ngx.ERR,"Fail connect to local redis:",err)
   return ngx.exit(500)
end

-- Calculate the number of elements for table
function htgetn(hashtable)
   local n = 0
   for _,v in pairs(hashtable) do
      n = n + 1
   end
   return n
end

-- Split string by delimiter
function split(str,delimiter)
  local sub_str_table = {}
  while true do
     local s , e = string.find(str,"%"..delimiter)
     if s and e then
        sub_str = string.sub(str,1,e-1)
        table.insert(sub_str_table,sub_str)
        str = string.sub(str,e+1,-1)
     else
        if htgetn(sub_str_table) > 0 then
           table.insert(sub_str_table,str)
           return sub_str_table
        else
           return nil
        end

        break

     end
  end
end

-- Main
uristr=ngx.var.uri
urisegtab = split(string.sub(uristr,2,-1),"/")
uid=urisegtab[1]
cid=urisegtab[2]


-- Obtain the corresponding collection server address

-- Step one : find cjs address of cid in nginx local cache
local ipaddr = cache_dict:get(cid)
-- Step two : Obtain cjs address of cid from redis server
if not ipaddr then
   local ipaddr,err = red:hget("cid_to_ipaddr",cid)

   if not ipaddr then
      ngx.log(ngx.ERR,"failed to get redis key:",err)
      return ngx.exit(500)
   end

   if ipaddr == ngx.null then
      ngx.log(ngx.ERR,"not ipaddr found for cid ",cid)
      return ngx.exit(400)
   end

-- Step three : Write cjs address of cid to nginx local cache
   succ,err,forcible = cache_dict:set(cid,ipaddr)
   if not succ then
      ngx.log(ngx.ERR,"fail write cjs address to nginx local cache",err)
   end    
end

ngx.var.target = ipaddr


';

proxy_pass http://$target;

# -- /
#  FOR RESOLVE:
#  failed (104: Connection reset by peer)
# -- /
proxy_connect_timeout 300;
proxy_send_timeout 300;
proxy_read_timeout 300;

          }
    }


#########################################
#FOR RFID KAOQIN VIDEO 
#########################################

server {
          listen 80;
          server_name kqv.68baobao.cn;
          location /crossdomain.xml {
                   alias  /var/www/crossdomain.xml;
          }

          #CHECK NGINX LOCAL CACHE
          location /checkcache {
content_by_lua '

local cache_dict = ngx.shared.cache_dict
keylist = cache_dict:get_keys(0)
for key,value in ipairs(keylist)
   do
     ngx.say(key ,"--",value,"--",cache_dict:get(value))
   end

';
          }
   
          #MAIN HANDLE PROGRAM
          location /getplaylist {

set $target '';

access_by_lua '

local redis = require "resty.redis"
local cjson = require "cjson"
local cache_dict = ngx.shared.cache_dict

-- Create a link to redis
local red = redis:new()
red:set_timeout(1000)
local ok,err = red:connect("10.2.10.19",6379)
if not ok then
   ngx.log(ngx.ERR,"Fail connect to local redis:",err)
   return ngx.exit(500)
end

-- Calculate the number of elements for table
function htgetn(hashtable)
   local n = 0
   for _,v in pairs(hashtable) do
      n = n + 1
   end
   return n
end

-- Split string by delimiter
function split(str,delimiter)
  local sub_str_table = {}
  while true do
     local s , e = string.find(str,"%"..delimiter)
     if s and e then
        sub_str = string.sub(str,1,e-1)
        table.insert(sub_str_table,sub_str)
        str = string.sub(str,e+1,-1)
     else
        if htgetn(sub_str_table) > 0 then
           table.insert(sub_str_table,str)
           return sub_str_table
        else
           return nil
        end

        break

     end
  end
end

-- Main
uristr=ngx.var.uri
urisegtab = split(string.sub(uristr,2,-1),"/")
uid=urisegtab[2]
cid=urisegtab[3]


-- Obtain the corresponding collection server address

-- Step one : find cjs address of cid in nginx local cache
local ipaddr = cache_dict:get(cid)
-- Step two : Obtain cjs address of cid from redis server
if not ipaddr then
   local ipaddr,err = red:hget("cid_to_ipaddr",cid)

   if not ipaddr then
      ngx.log(ngx.ERR,"failed to get redis key:",err)
      return ngx.exit(500)
   end

   if ipaddr == ngx.null then
      ngx.log(ngx.ERR,"not ipaddr found for cid ",cid)
      return ngx.exit(400)
   end

-- Step three : Write cjs address of cid to nginx local cache
   succ,err,forcible = cache_dict:set(cid,ipaddr)
   if not succ then
      ngx.log(ngx.ERR,"fail write cjs address to nginx local cache",err)
   end    
end

local ipaddr = ipaddr..":81"
ngx.var.target = ipaddr


';

proxy_pass http://$target;

# -- /
#  FOR RESOLVE:
#  failed (104: Connection reset by peer)
# -- /
proxy_connect_timeout 300;
proxy_send_timeout 300;
proxy_read_timeout 300;

          }
    }


#########################################
#TO PREVENT UNAUTHORIZED DOMAIN ACCESS
#########################################
   server {
      listen 80 default_server;
      server_name _;
      access_log off;
   }

}

